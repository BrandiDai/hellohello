{"ast":null,"code":"import { UnavailabilityError } from '@unimodules/core';\nimport ExpoApplication from './ExpoApplication';\nexport const nativeApplicationVersion = ExpoApplication ? ExpoApplication.nativeApplicationVersion || null : null;\nexport const nativeBuildVersion = ExpoApplication ? ExpoApplication.nativeBuildVersion || null : null;\nexport const applicationName = ExpoApplication ? ExpoApplication.applicationName || null : null;\nexport const applicationId = ExpoApplication ? ExpoApplication.applicationId || null : null;\nexport const androidId = ExpoApplication ? ExpoApplication.androidId || null : null;\nexport async function getInstallReferrerAsync() {\n  if (!ExpoApplication.getInstallReferrerAsync) {\n    throw new UnavailabilityError('expo-application', 'getInstallReferrerAsync');\n  }\n\n  return await ExpoApplication.getInstallReferrerAsync();\n}\nexport async function getIosIdForVendorAsync() {\n  if (!ExpoApplication.getIosIdForVendorAsync) {\n    throw new UnavailabilityError('expo-application', 'getIosIdForVendorAsync');\n  }\n\n  return await ExpoApplication.getIosIdForVendorAsync();\n}\nexport async function getInstallationTimeAsync() {\n  if (!ExpoApplication.getInstallationTimeAsync) {\n    throw new UnavailabilityError('expo-application', 'getInstallationTimeAsync');\n  }\n\n  let installationTime = await ExpoApplication.getInstallationTimeAsync();\n  return new Date(installationTime);\n}\nexport async function getLastUpdateTimeAsync() {\n  if (!ExpoApplication.getLastUpdateTimeAsync) {\n    throw new UnavailabilityError('expo-application', 'getLastUpdateTimeAsync');\n  }\n\n  let lastUpdateTime = await ExpoApplication.getLastUpdateTimeAsync();\n  return new Date(lastUpdateTime);\n}","map":{"version":3,"sources":["../src/Application.ts"],"names":[],"mappings":"AAAA,SAAS,mBAAT,QAAoC,kBAApC;AAEA,OAAO,eAAP,MAA4B,mBAA5B;AAEA,OAAO,MAAM,wBAAwB,GAAkB,eAAe,GAClE,eAAe,CAAC,wBAAhB,IAA4C,IADsB,GAElE,IAFG;AAGP,OAAO,MAAM,kBAAkB,GAAkB,eAAe,GAC5D,eAAe,CAAC,kBAAhB,IAAsC,IADsB,GAE5D,IAFG;AAGP,OAAO,MAAM,eAAe,GAAkB,eAAe,GACzD,eAAe,CAAC,eAAhB,IAAmC,IADsB,GAEzD,IAFG;AAGP,OAAO,MAAM,aAAa,GAAkB,eAAe,GACvD,eAAe,CAAC,aAAhB,IAAiC,IADsB,GAEvD,IAFG;AAGP,OAAO,MAAM,SAAS,GAAkB,eAAe,GAAG,eAAe,CAAC,SAAhB,IAA6B,IAAhC,GAAuC,IAAvF;AAEP,OAAO,eAAe,uBAAf,GAAsC;AAC3C,MAAI,CAAC,eAAe,CAAC,uBAArB,EAA8C;AAC5C,UAAM,IAAI,mBAAJ,CAAwB,kBAAxB,EAA4C,yBAA5C,CAAN;AACD;;AACD,SAAO,MAAM,eAAe,CAAC,uBAAhB,EAAb;AACD;AAED,OAAO,eAAe,sBAAf,GAAqC;AAC1C,MAAI,CAAC,eAAe,CAAC,sBAArB,EAA6C;AAC3C,UAAM,IAAI,mBAAJ,CAAwB,kBAAxB,EAA4C,wBAA5C,CAAN;AACD;;AACD,SAAO,MAAM,eAAe,CAAC,sBAAhB,EAAb;AACD;AAED,OAAO,eAAe,wBAAf,GAAuC;AAC5C,MAAI,CAAC,eAAe,CAAC,wBAArB,EAA+C;AAC7C,UAAM,IAAI,mBAAJ,CAAwB,kBAAxB,EAA4C,0BAA5C,CAAN;AACD;;AACD,MAAI,gBAAgB,GAAG,MAAM,eAAe,CAAC,wBAAhB,EAA7B;AACA,SAAO,IAAI,IAAJ,CAAS,gBAAT,CAAP;AACD;AAED,OAAO,eAAe,sBAAf,GAAqC;AAC1C,MAAI,CAAC,eAAe,CAAC,sBAArB,EAA6C;AAC3C,UAAM,IAAI,mBAAJ,CAAwB,kBAAxB,EAA4C,wBAA5C,CAAN;AACD;;AACD,MAAI,cAAc,GAAG,MAAM,eAAe,CAAC,sBAAhB,EAA3B;AACA,SAAO,IAAI,IAAJ,CAAS,cAAT,CAAP;AACD","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\n\nimport ExpoApplication from './ExpoApplication';\n\nexport const nativeApplicationVersion: string | null = ExpoApplication\n  ? ExpoApplication.nativeApplicationVersion || null\n  : null;\nexport const nativeBuildVersion: string | null = ExpoApplication\n  ? ExpoApplication.nativeBuildVersion || null\n  : null;\nexport const applicationName: string | null = ExpoApplication\n  ? ExpoApplication.applicationName || null\n  : null;\nexport const applicationId: string | null = ExpoApplication\n  ? ExpoApplication.applicationId || null\n  : null;\nexport const androidId: string | null = ExpoApplication ? ExpoApplication.androidId || null : null;\n\nexport async function getInstallReferrerAsync(): Promise<string> {\n  if (!ExpoApplication.getInstallReferrerAsync) {\n    throw new UnavailabilityError('expo-application', 'getInstallReferrerAsync');\n  }\n  return await ExpoApplication.getInstallReferrerAsync();\n}\n\nexport async function getIosIdForVendorAsync(): Promise<string> {\n  if (!ExpoApplication.getIosIdForVendorAsync) {\n    throw new UnavailabilityError('expo-application', 'getIosIdForVendorAsync');\n  }\n  return await ExpoApplication.getIosIdForVendorAsync();\n}\n\nexport async function getInstallationTimeAsync(): Promise<Date> {\n  if (!ExpoApplication.getInstallationTimeAsync) {\n    throw new UnavailabilityError('expo-application', 'getInstallationTimeAsync');\n  }\n  let installationTime = await ExpoApplication.getInstallationTimeAsync();\n  return new Date(installationTime);\n}\n\nexport async function getLastUpdateTimeAsync(): Promise<Date> {\n  if (!ExpoApplication.getLastUpdateTimeAsync) {\n    throw new UnavailabilityError('expo-application', 'getLastUpdateTimeAsync');\n  }\n  let lastUpdateTime = await ExpoApplication.getLastUpdateTimeAsync();\n  return new Date(lastUpdateTime);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}