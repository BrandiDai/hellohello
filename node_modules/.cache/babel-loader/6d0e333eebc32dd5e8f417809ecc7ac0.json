{"ast":null,"code":"import { EventEmitter } from '@unimodules/core';\nimport { throwIfAudioIsDisabled } from './AudioAvailability';\nimport { PlaybackMixin, assertStatusValuesInBounds, getNativeSourceAndFullInitialStatusForLoadAsync, getUnloadedStatus } from '../AV';\nimport ExponentAV from '../ExponentAV';\nexport class Sound {\n  constructor() {\n    this._loaded = false;\n    this._loading = false;\n    this._key = null;\n    this._lastStatusUpdate = null;\n    this._lastStatusUpdateTime = null;\n    this._subscriptions = [];\n    this._eventEmitter = new EventEmitter(ExponentAV);\n    this._coalesceStatusUpdatesInMillis = 100;\n    this._onPlaybackStatusUpdate = null;\n\n    this._internalStatusUpdateCallback = ({\n      key,\n      status\n    }) => {\n      if (this._key === key) {\n        this._callOnPlaybackStatusUpdateForNewStatus(status);\n      }\n    };\n\n    this._internalErrorCallback = ({\n      key,\n      error\n    }) => {\n      if (this._key === key) {\n        this._errorCallback(error);\n      }\n    };\n\n    this._errorCallback = error => {\n      this._clearSubscriptions();\n\n      this._loaded = false;\n      this._key = null;\n\n      this._callOnPlaybackStatusUpdateForNewStatus(getUnloadedStatus(error));\n    }; // ### Unified playback API ### (consistent with Video.js)\n    // All calls automatically call onPlaybackStatusUpdate as a side effect.\n    // Get status API\n\n\n    this.getStatusAsync = async () => {\n      if (this._loaded) {\n        return this._performOperationAndHandleStatusAsync(() => ExponentAV.getStatusForSound(this._key));\n      }\n\n      const status = getUnloadedStatus();\n\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n\n      return status;\n    };\n  } // Internal methods\n\n\n  _callOnPlaybackStatusUpdateForNewStatus(status) {\n    const shouldDismissBasedOnCoalescing = this._lastStatusUpdateTime && JSON.stringify(status) === this._lastStatusUpdate && Date.now() - this._lastStatusUpdateTime.getTime() < this._coalesceStatusUpdatesInMillis;\n\n    if (this._onPlaybackStatusUpdate != null && !shouldDismissBasedOnCoalescing) {\n      this._onPlaybackStatusUpdate(status);\n\n      this._lastStatusUpdateTime = new Date();\n      this._lastStatusUpdate = JSON.stringify(status);\n    }\n  }\n\n  async _performOperationAndHandleStatusAsync(operation) {\n    throwIfAudioIsDisabled();\n\n    if (this._loaded) {\n      const status = await operation();\n\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n\n      return status;\n    } else {\n      throw new Error('Cannot complete operation because sound is not loaded.');\n    }\n  } // TODO: We can optimize by only using time observer on native if (this._onPlaybackStatusUpdate).\n\n\n  _subscribeToNativeEvents() {\n    if (this._loaded) {\n      this._subscriptions.push(this._eventEmitter.addListener('didUpdatePlaybackStatus', this._internalStatusUpdateCallback));\n\n      this._subscriptions.push(this._eventEmitter.addListener('ExponentAV.onError', this._internalErrorCallback));\n    }\n  }\n\n  _clearSubscriptions() {\n    this._subscriptions.forEach(e => e.remove());\n\n    this._subscriptions = [];\n  }\n\n  setOnPlaybackStatusUpdate(onPlaybackStatusUpdate) {\n    this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n    this.getStatusAsync();\n  } // Loading / unloading API\n\n\n  async loadAsync(source, initialStatus = {}, downloadFirst = true) {\n    throwIfAudioIsDisabled();\n\n    if (this._loading) {\n      throw new Error('The Sound is already loading.');\n    }\n\n    if (!this._loaded) {\n      this._loading = true;\n      const {\n        nativeSource,\n        fullInitialStatus\n      } = await getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst); // This is a workaround, since using load with resolve / reject seems to not work.\n\n      return new Promise((resolve, reject) => {\n        const loadSuccess = result => {\n          const [key, status] = result;\n          this._key = key;\n          this._loaded = true;\n          this._loading = false;\n\n          this._subscribeToNativeEvents();\n\n          this._callOnPlaybackStatusUpdateForNewStatus(status);\n\n          resolve(status);\n        };\n\n        const loadError = error => {\n          this._loading = false;\n          reject(error);\n        };\n\n        ExponentAV.loadForSound(nativeSource, fullInitialStatus).then(loadSuccess).catch(loadError);\n      });\n    } else {\n      throw new Error('The Sound is already loaded.');\n    }\n  }\n\n  async unloadAsync() {\n    if (this._loaded) {\n      this._loaded = false;\n      const key = this._key;\n      this._key = null;\n      const status = await ExponentAV.unloadForSound(key);\n\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n\n      this._clearSubscriptions();\n\n      return status;\n    } else {\n      return this.getStatusAsync(); // Automatically calls onPlaybackStatusUpdate.\n    }\n  } // Set status API (only available while isLoaded = true)\n\n\n  async setStatusAsync(status) {\n    assertStatusValuesInBounds(status);\n    return this._performOperationAndHandleStatusAsync(() => ExponentAV.setStatusForSound(this._key, status));\n  }\n\n  async replayAsync(status = {}) {\n    if (status.positionMillis && status.positionMillis !== 0) {\n      throw new Error('Requested position after replay has to be 0.');\n    }\n\n    return this._performOperationAndHandleStatusAsync(() => ExponentAV.replaySound(this._key, { ...status,\n      positionMillis: 0,\n      shouldPlay: true\n    }));\n  }\n\n}\n\nSound.create = async (source, initialStatus = {}, onPlaybackStatusUpdate = null, downloadFirst = true) => {\n  console.warn(`Sound.create is deprecated in favor of Sound.createAsync with the same API except for the new method name`);\n  return Sound.createAsync(source, initialStatus, onPlaybackStatusUpdate, downloadFirst);\n};\n\nSound.createAsync = async (source, initialStatus = {}, onPlaybackStatusUpdate = null, downloadFirst = true) => {\n  const sound = new Sound();\n  sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n  const status = await sound.loadAsync(source, initialStatus, downloadFirst);\n  return {\n    sound,\n    status\n  };\n};\n\nObject.assign(Sound.prototype, PlaybackMixin);","map":{"version":3,"sources":["../../src/Audio/Sound.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from '@unimodules/core';\nimport { throwIfAudioIsDisabled } from './AudioAvailability';\nimport {\n  Playback,\n  PlaybackMixin,\n  PlaybackSource,\n  PlaybackStatus,\n  PlaybackStatusToSet,\n  assertStatusValuesInBounds,\n  getNativeSourceAndFullInitialStatusForLoadAsync,\n  getUnloadedStatus,\n} from '../AV';\nimport { PitchCorrectionQuality } from '../Audio';\nimport ExponentAV from '../ExponentAV';\n\ntype AudioInstance = number | HTMLMediaElement | null;\nexport class Sound implements Playback {\n  _loaded: boolean = false;\n  _loading: boolean = false;\n  _key: AudioInstance = null;\n  _lastStatusUpdate: string | null = null;\n  _lastStatusUpdateTime: Date | null = null;\n  _subscriptions: Array<{ remove: () => void }> = [];\n  _eventEmitter: EventEmitter = new EventEmitter(ExponentAV);\n  _coalesceStatusUpdatesInMillis: number = 100;\n  _onPlaybackStatusUpdate: ((status: PlaybackStatus) => void) | null = null;\n\n  static create = async (\n    source: PlaybackSource,\n    initialStatus: PlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: PlaybackStatus) => void) | null = null,\n    downloadFirst: boolean = true\n  ): Promise<{ sound: Sound; status: PlaybackStatus }> => {\n    console.warn(\n      `Sound.create is deprecated in favor of Sound.createAsync with the same API except for the new method name`\n    );\n    return Sound.createAsync(source, initialStatus, onPlaybackStatusUpdate, downloadFirst);\n  };\n\n  static createAsync = async (\n    source: PlaybackSource,\n    initialStatus: PlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: PlaybackStatus) => void) | null = null,\n    downloadFirst: boolean = true\n  ): Promise<{ sound: Sound; status: PlaybackStatus }> => {\n    const sound: Sound = new Sound();\n    sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n    const status: PlaybackStatus = await sound.loadAsync(source, initialStatus, downloadFirst);\n    return { sound, status };\n  };\n\n  // Internal methods\n\n  _callOnPlaybackStatusUpdateForNewStatus(status: PlaybackStatus) {\n    const shouldDismissBasedOnCoalescing =\n      this._lastStatusUpdateTime &&\n      JSON.stringify(status) === this._lastStatusUpdate &&\n      Date.now() - this._lastStatusUpdateTime.getTime() < this._coalesceStatusUpdatesInMillis;\n\n    if (this._onPlaybackStatusUpdate != null && !shouldDismissBasedOnCoalescing) {\n      this._onPlaybackStatusUpdate(status);\n      this._lastStatusUpdateTime = new Date();\n      this._lastStatusUpdate = JSON.stringify(status);\n    }\n  }\n\n  async _performOperationAndHandleStatusAsync(\n    operation: () => Promise<PlaybackStatus>\n  ): Promise<PlaybackStatus> {\n    throwIfAudioIsDisabled();\n    if (this._loaded) {\n      const status = await operation();\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n      return status;\n    } else {\n      throw new Error('Cannot complete operation because sound is not loaded.');\n    }\n  }\n\n  _internalStatusUpdateCallback = ({\n    key,\n    status,\n  }: {\n    key: AudioInstance;\n    status: PlaybackStatus;\n  }) => {\n    if (this._key === key) {\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n    }\n  };\n\n  _internalErrorCallback = ({ key, error }: { key: AudioInstance; error: string }) => {\n    if (this._key === key) {\n      this._errorCallback(error);\n    }\n  };\n\n  // TODO: We can optimize by only using time observer on native if (this._onPlaybackStatusUpdate).\n  _subscribeToNativeEvents() {\n    if (this._loaded) {\n      this._subscriptions.push(\n        this._eventEmitter.addListener(\n          'didUpdatePlaybackStatus',\n          this._internalStatusUpdateCallback\n        )\n      );\n\n      this._subscriptions.push(\n        this._eventEmitter.addListener('ExponentAV.onError', this._internalErrorCallback)\n      );\n    }\n  }\n\n  _clearSubscriptions() {\n    this._subscriptions.forEach(e => e.remove());\n    this._subscriptions = [];\n  }\n\n  _errorCallback = (error: string) => {\n    this._clearSubscriptions();\n    this._loaded = false;\n    this._key = null;\n    this._callOnPlaybackStatusUpdateForNewStatus(getUnloadedStatus(error));\n  };\n\n  // ### Unified playback API ### (consistent with Video.js)\n  // All calls automatically call onPlaybackStatusUpdate as a side effect.\n\n  // Get status API\n\n  getStatusAsync = async (): Promise<PlaybackStatus> => {\n    if (this._loaded) {\n      return this._performOperationAndHandleStatusAsync(() =>\n        ExponentAV.getStatusForSound(this._key)\n      );\n    }\n    const status: PlaybackStatus = getUnloadedStatus();\n    this._callOnPlaybackStatusUpdateForNewStatus(status);\n    return status;\n  };\n\n  setOnPlaybackStatusUpdate(onPlaybackStatusUpdate: ((status: PlaybackStatus) => void) | null) {\n    this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n    this.getStatusAsync();\n  }\n\n  // Loading / unloading API\n\n  async loadAsync(\n    source: PlaybackSource,\n    initialStatus: PlaybackStatusToSet = {},\n    downloadFirst: boolean = true\n  ): Promise<PlaybackStatus> {\n    throwIfAudioIsDisabled();\n    if (this._loading) {\n      throw new Error('The Sound is already loading.');\n    }\n    if (!this._loaded) {\n      this._loading = true;\n\n      const {\n        nativeSource,\n        fullInitialStatus,\n      } = await getNativeSourceAndFullInitialStatusForLoadAsync(\n        source,\n        initialStatus,\n        downloadFirst\n      );\n\n      // This is a workaround, since using load with resolve / reject seems to not work.\n      return new Promise<PlaybackStatus>((resolve, reject) => {\n        const loadSuccess = (result: [AudioInstance, PlaybackStatus]) => {\n          const [key, status] = result;\n          this._key = key;\n          this._loaded = true;\n          this._loading = false;\n          this._subscribeToNativeEvents();\n          this._callOnPlaybackStatusUpdateForNewStatus(status);\n          resolve(status);\n        };\n\n        const loadError = (error: Error) => {\n          this._loading = false;\n          reject(error);\n        };\n\n        ExponentAV.loadForSound(nativeSource, fullInitialStatus)\n          .then(loadSuccess)\n          .catch(loadError);\n      });\n    } else {\n      throw new Error('The Sound is already loaded.');\n    }\n  }\n\n  async unloadAsync(): Promise<PlaybackStatus> {\n    if (this._loaded) {\n      this._loaded = false;\n      const key = this._key;\n      this._key = null;\n      const status = await ExponentAV.unloadForSound(key);\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n      this._clearSubscriptions();\n      return status;\n    } else {\n      return this.getStatusAsync(); // Automatically calls onPlaybackStatusUpdate.\n    }\n  }\n\n  // Set status API (only available while isLoaded = true)\n\n  async setStatusAsync(status: PlaybackStatusToSet): Promise<PlaybackStatus> {\n    assertStatusValuesInBounds(status);\n    return this._performOperationAndHandleStatusAsync(() =>\n      ExponentAV.setStatusForSound(this._key, status)\n    );\n  }\n\n  async replayAsync(status: PlaybackStatusToSet = {}): Promise<PlaybackStatus> {\n    if (status.positionMillis && status.positionMillis !== 0) {\n      throw new Error('Requested position after replay has to be 0.');\n    }\n\n    return this._performOperationAndHandleStatusAsync(() =>\n      ExponentAV.replaySound(this._key, {\n        ...status,\n        positionMillis: 0,\n        shouldPlay: true,\n      })\n    );\n  }\n\n  // Methods of the Playback interface that are set via PlaybackMixin\n  playAsync!: () => Promise<PlaybackStatus>;\n  playFromPositionAsync!: (\n    positionMillis: number,\n    tolerances?: { toleranceMillisBefore?: number; toleranceMillisAfter?: number }\n  ) => Promise<PlaybackStatus>;\n  pauseAsync!: () => Promise<PlaybackStatus>;\n  stopAsync!: () => Promise<PlaybackStatus>;\n  setPositionAsync!: (\n    positionMillis: number,\n    tolerances?: { toleranceMillisBefore?: number; toleranceMillisAfter?: number }\n  ) => Promise<PlaybackStatus>;\n  setRateAsync!: (\n    rate: number,\n    shouldCorrectPitch: boolean,\n    pitchCorrectionQuality?: PitchCorrectionQuality\n  ) => Promise<PlaybackStatus>;\n  setVolumeAsync!: (volume: number) => Promise<PlaybackStatus>;\n  setIsMutedAsync!: (isMuted: boolean) => Promise<PlaybackStatus>;\n  setIsLoopingAsync!: (isLooping: boolean) => Promise<PlaybackStatus>;\n  setProgressUpdateIntervalAsync!: (\n    progressUpdateIntervalMillis: number\n  ) => Promise<PlaybackStatus>;\n}\n\nObject.assign(Sound.prototype, PlaybackMixin);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}